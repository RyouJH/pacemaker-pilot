#!/bin/sh
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

#
# Defaults
#
OCF_RESKEY_awscli_default="/usr/bin/aws"
OCF_RESKEY_api_delay_default="3"
OCF_RESKEY_netmask_default="24"

: ${OCF_RESKEY_awscli=${OCF_RESKEY_awscli_default}}
: ${OCF_RESKEY_api_delay=${OCF_RESKEY_api_delay_default}}
: ${OCF_RESKEY_netmask=${OCF_RESKEY_netmask_default}}
meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="awsebs">
<version>1.0</version>

<longdesc lang="en">
Resource Agent for Amazon AWS Secondary Private IP Addresses.

It manages AWS Secondary Private IP Addresses with awscli.

Credentials needs to be setup by running "aws configure".

See https://aws.amazon.com/cli/ for more information about awscli.
</longdesc>
<shortdesc lang="en">Amazon AWS Secondary Private IP Address Resource Agent</shortdesc>

<parameters>

<parameter name="awscli" unique="0">
<longdesc lang="en">
command line tools for aws services
</longdesc>
<shortdesc lang="en">aws cli tools</shortdesc>
<content type="string" default="${OCF_RESKEY_awscli_default}" />
</parameter>

<parameter name="volume_id" unique="1" required="1">
<longdesc lang="en">
reserved data volume id for ec2 instance
</longdesc>
<shortdesc lang="en">take over target volume_id</shortdesc>
<content type="string" default="" />
</parameter>
</parameters>

<actions>
<action name="start"        timeout="600s" />
<action name="stop"         timeout="600s" />
<action name="monitor"      timeout="30s" interval="20s" depth="0" />
<action name="migrate_to"   timeout="30s" />
<action name="migrate_from" timeout="30s" />
<action name="meta-data"    timeout="5s" />
<action name="validate"     timeout="10s" />
<action name="validate-all" timeout="10s" />
</actions>
</resource-agent>
END
}

#######################################################################

awsebs_usage() {
    cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

awsebs_start() {
    awsebs_monitor && return $OCF_SUCCESS
    ocf_log info "volume detached successfully. volume : ${VOLUME_ID}"
    $AWSCLI ec2 attach-volume --volume-id ${VOLUME_ID} --instance-id ${INSTANCE_ID} --device /dev/xvdc && \
    $AWSCLI ec2 wait volume-in-use --volume-ids ${VOLUME_ID} && \
    ocf_log info "waiting for attach volume successfully. volume : ${VOLUME_ID}, ec2 : ${INSTANCE_ID}"
    RET=$?
    if [ $RET -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    ocf_log info "aws ebs has been successfully brought up (${VOLUME_ID})"
    return $OCF_SUCCESS
}

awsebs_stop() {
    awsebs_monitor || return $OCF_SUCCESS
    $AWSCLI ec2 detach-volume --volume-id ${VOLUME_ID} && \
    $AWSCLI ec2 wait volume-available --volume-ids ${VOLUME_ID} && \
    ocf_log info "waiting for detach volume successfully. volume : ${VOLUME_ID}, from ec2 : ${INSTANCE_ID}"
    RET=$?
    if [ $RET -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    ocf_log info "secondary_private_ip has been successfully brought down (${SECONDARY_PRIVATE_IP})"
    return $OCF_SUCCESS
}

awsebs_monitor() {
    $AWSCLI ec2 describe-instances \
            --instance-id ${INSTANCE_ID} \
            --query "Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId" \
 	        --output text | \
            grep -qE "(^|\s)${VOLUME_ID}(\s|$)"
    RET=$?

    if [ $RET -ne 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    return $OCF_SUCCESS
}

awsebs_validate() {
    check_binary ${AWSCLI}

    if [ -z "$OCF_RESKEY_profile" ]; then
        ocf_exit_reason "profile parameter not set"
        return $OCF_ERR_CONFIGURED
    fi

    if [ -z "${INSTANCE_ID}" ]; then
        ocf_exit_reason "instance_id not found. Is this a EC2 instance?"
        return $OCF_ERR_GENERIC
    fi

    return $OCF_SUCCESS
}

case $__OCF_ACTION in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
esac

AWSCLI="${OCF_RESKEY_awscli}"
SECONDARY_PRIVATE_IP="${OCF_RESKEY_secondary_private_ip}"
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id -H "X-aws-ec2-metadata-token: $TOKEN")
VOLUME_ID="${OCF_RESKEY_volume_id}"
case $__OCF_ACTION in
    start)
        awsebs_validate
        awsebs_start
        ;;
    stop)
        awsebs_stop
        ;;
    monitor)
        awsebs_monitor
        ;;
    migrate_to)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
        awsebs_stop
        ;;
    migrate_from)
        ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
        awsebs_start
        ;;
    reload)
        ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
        ;;
    validate|validate-all)
        awsebs_validate
        ;;
    usage|help)
        awsebs_usage
        exit $OCF_SUCCESS
        ;;
    *)
        awsebs_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
